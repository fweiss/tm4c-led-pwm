#include <stdint.h>
#include <iostream>

// void xp(int P, int Q) {
//     std::cout << P << "," << Q << "\n";
// }

template<int P>
class R {
    public:
    static const int x = P + 10;
};

template<int P, int Q>
class RF {
    public:
    void operator=(bool onoff) const {
        if (onoff) {
            std::cout << P << "set" << Q << "\n";
        } else {
            std::cout << P << "clear" << Q << "\n";
        }
    }
};

template<uint32_t P, int Q>
class DP : public R<P> {
    public:
    RF<P + 1, Q> direction1;
    RF<P + 2, Q> direction2;
    RF<P + 3, Q> direction3;
    RF<P + 4, Q> direction4;
    RF<P + 5, Q> direction5;
    RF<P + 6, Q> direction6;
};

template<uint32_t P, int Q>
void s(const DP<P, Q> & dp) {
    // std::cout << P << "," << Q << "\n";
    dp.direction1 = true;
    dp.direction2 = true;
    dp.direction3 = true;
    dp.direction4 = true;
    dp.direction5 = true;
    dp.direction6 = true;
}

int main() {
    static uint32_t P[100];
    uint32_t PP = static_cast<uint32_t>(&P[0]);

    DP<&P[0], 2> dp12;
    DP<&P[20], 3> dp23;

    s(dp12);
    s(dp23);
}
